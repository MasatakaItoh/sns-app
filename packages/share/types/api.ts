/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/users/": {
    /** クエリでユーザー情報を取得する */
    get: {
      parameters: {
        query: {
          name: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              _id: string;
              /** @example ユーザー名 */
              userName: string;
              /** @example test@test.com */
              email: string;
              /** @example testtest */
              password: string;
              /** @example sample.png */
              profilePicture?: string;
              /** @example sample.png */
              coverPicture?: string;
              /**
               * @example [
               *   "1"
               * ]
               */
              followers?: (string)[];
              /**
               * @example [
               *   "1"
               * ]
               */
              followings?: (string)[];
              /** @example false */
              isAdmin?: boolean;
              /** @example ユーザーの説明文 */
              desc?: string;
              /** @example 東京都 */
              city?: string;
            };
          };
        };
        /** @description Not Found */
        404: never;
        /** @description Internal Server Error */
        500: never;
      };
    };
  };
  "/api/users/{id}": {
    /** ユーザー情報を取得する */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              _id: string;
              /** @example ユーザー名 */
              userName: string;
              /** @example test@test.com */
              email: string;
              /** @example testtest */
              password: string;
              /** @example sample.png */
              profilePicture?: string;
              /** @example sample.png */
              coverPicture?: string;
              /**
               * @example [
               *   "1"
               * ]
               */
              followers?: (string)[];
              /**
               * @example [
               *   "1"
               * ]
               */
              followings?: (string)[];
              /** @example false */
              isAdmin?: boolean;
              /** @example ユーザーの説明文 */
              desc?: string;
              /** @example 東京都 */
              city?: string;
            };
          };
        };
        /** @description Not Found */
        404: never;
        /** @description Internal Server Error */
        500: never;
      };
    };
  };
  "/api/posts": {
    /** 投稿を作成する */
    post: {
      requestBody?: {
        content: {
          "application/json": {
            /** @example 1 */
            _id: string;
            /** @example 1 */
            userId: string;
            /** @example 投稿本文 */
            desc?: string;
            /** @example https://placehold.jp/600x400.png */
            img?: string;
            /**
             * @example [
             *   "1"
             * ]
             */
            likes?: (string)[];
            /** @example */
            createdAt: string;
            /** @example */
            updatedAt: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              _id: string;
              /** @example 1 */
              userId: string;
              /** @example 投稿本文 */
              desc?: string;
              /** @example https://placehold.jp/600x400.png */
              img?: string;
              /**
               * @example [
               *   "1"
               * ]
               */
              likes?: (string)[];
              /** @example */
              createdAt: string;
              /** @example */
              updatedAt: string;
            };
          };
        };
        /** @description Not Found */
        404: never;
        /** @description Internal Server Error */
        500: never;
      };
    };
  };
  "/api/posts/{id}": {
    /** 投稿を取得する */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              /** @example 1 */
              _id: string;
              /** @example 1 */
              userId: string;
              /** @example 投稿本文 */
              desc?: string;
              /** @example https://placehold.jp/600x400.png */
              img?: string;
              /**
               * @example [
               *   "1"
               * ]
               */
              likes?: (string)[];
              /** @example */
              createdAt: string;
              /** @example */
              updatedAt: string;
            };
          };
        };
        /** @description Not Found */
        404: never;
        /** @description Internal Server Error */
        500: never;
      };
    };
    /** 投稿を更新する */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            /** @example 1 */
            _id: string;
            /** @example 1 */
            userId: string;
            /** @example 投稿本文 */
            desc?: string;
            /** @example https://placehold.jp/600x400.png */
            img?: string;
            /**
             * @example [
             *   "1"
             * ]
             */
            likes?: (string)[];
            /** @example */
            createdAt: string;
            /** @example */
            updatedAt: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: never;
        /**
         * @description 以下の条件を満たさない場合、Forbidden
         * - リクエストユーザー自身の投稿
         */
        403: never;
        /** @description Not Found */
        404: never;
        /** @description Internal Server Error */
        500: never;
      };
    };
    /** 投稿を削除する */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            userId: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: never;
        /**
         * @description 以下の条件を満たさない場合、Forbidden
         * - リクエストユーザー自身の投稿
         */
        403: never;
        /** @description Not Found */
        404: never;
        /** @description Internal Server Error */
        500: never;
      };
    };
  };
  "/api/posts/{id}/likes": {
    /** 投稿にいいねする */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody?: {
        content: {
          "application/json": {
            userId: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: never;
        /** @description Not Found */
        404: never;
        /** @description Internal Server Error */
        500: never;
      };
    };
  };
  "/api/posts/timeline/{userId}": {
    /** タイムラインの投稿を取得する */
    get: {
      parameters: {
        path: {
          userId: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": ({
                /** @example 1 */
                _id: string;
                /** @example 1 */
                userId: string;
                /** @example 投稿本文 */
                desc?: string;
                /** @example https://placehold.jp/600x400.png */
                img?: string;
                /**
                 * @example [
                 *   "1"
                 * ]
                 */
                likes?: (string)[];
                /** @example */
                createdAt: string;
                /** @example */
                updatedAt: string;
              })[];
          };
        };
        /** @description Not Found */
        404: never;
        /** @description Internal Server Error */
        500: never;
      };
    };
  };
  "/api/posts/profile/timeline/{userName}": {
    /** プロフィールのタイムラインの投稿を取得する */
    get: {
      parameters: {
        path: {
          userName: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": ({
                /** @example 1 */
                _id: string;
                /** @example 1 */
                userId: string;
                /** @example 投稿本文 */
                desc?: string;
                /** @example https://placehold.jp/600x400.png */
                img?: string;
                /**
                 * @example [
                 *   "1"
                 * ]
                 */
                likes?: (string)[];
                /** @example */
                createdAt: string;
                /** @example */
                updatedAt: string;
              })[];
          };
        };
        /** @description Not Found */
        404: never;
        /** @description Internal Server Error */
        500: never;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Error */
    Error: {
      /** @description エラーメッセージ */
      error?: (string)[];
    };
    User: {
      /** @example 1 */
      _id: string;
      /** @example ユーザー名 */
      userName: string;
      /** @example test@test.com */
      email: string;
      /** @example testtest */
      password: string;
      /** @example sample.png */
      profilePicture?: string;
      /** @example sample.png */
      coverPicture?: string;
      /**
       * @example [
       *   "1"
       * ]
       */
      followers?: (string)[];
      /**
       * @example [
       *   "1"
       * ]
       */
      followings?: (string)[];
      /** @example false */
      isAdmin?: boolean;
      /** @example ユーザーの説明文 */
      desc?: string;
      /** @example 東京都 */
      city?: string;
    };
    Post: {
      /** @example 1 */
      _id: string;
      /** @example 1 */
      userId: string;
      /** @example 投稿本文 */
      desc?: string;
      /** @example https://placehold.jp/600x400.png */
      img?: string;
      /**
       * @example [
       *   "1"
       * ]
       */
      likes?: (string)[];
      /** @example */
      createdAt: string;
      /** @example */
      updatedAt: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
